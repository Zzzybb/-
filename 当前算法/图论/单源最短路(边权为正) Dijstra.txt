#include<bits/stdc++.h>
using namespace std;
using ll = long long;
#define endl '\n'

const int INF = 0x3f3f3f3f;
struct Edge
{
    int v,w;
};
vector<vector<Edge>>adj;
vector<int>dist;
vector<bool>vis;
int n,m;

void dijkstra(int s)
{
    dist.assign(n+1,INF);
    vis.assign(n+1,false);
    dist[s]=0;
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>q;
    q.push({0,s});
    while(!q.empty())
    {
        int u = q.top().second;
        q.pop();
        if(vis[u]) continue;
        vis[u] = true;
        for(auto& e : adj[u])
        {
            int v = e.v, w = e.w;
            if(dist[v] > dist[u] + w)
            {
                dist[v] = dist[u] + w;
                q.push({dist[v],v});
            }
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    adj.resize(n + 1);
    for(int i = 0; i < m; i++)
    {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }
    //起始点
    dijkstra(1);
    for(int i = 1; i <= n; i++)
    {
        cout << "distance from source to node "<< i << " is " << dist[i] << endl;
    }
    
    return 0;
}