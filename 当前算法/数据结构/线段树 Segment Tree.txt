#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int MAXN = 1e5 + 5;
ll tree[MAXN << 2], mark[MAXN << 2], n, m, A[MAXN];
void build(int p = 1, int cl = 1, int cr = n)
{
    if (cl == cr) return void(tree[p] = A[cl]);
    int mid = (cl + cr) >> 1;
    build(p << 1, cl, mid);
    build(p << 1 | 1, mid + 1, cr);
    tree[p] = tree[p << 1] + tree[p << 1 | 1];
}
void push_down(int p, int len)
{
    if (len <= 1) return;
    tree[p << 1] += mark[p] * (len - len / 2);
    mark[p << 1] += mark[p];
    tree[p << 1 | 1] += mark[p] * (len / 2);
    mark[p << 1 | 1] += mark[p];
    mark[p] = 0;
}
void update(int l, int r, int d, int p = 1, int cl = 1, int cr = n)
{
    if (cl >= l && cr <= r)
    {
        tree[p] += d * (cr - cl + 1);
		mark[p] += d;
		return;
    }
    push_down(p, cr - cl + 1);
    int mid = (cl + cr) >> 1;
    if (mid >= l) update(l, r, d, p << 1, cl, mid);
    if (mid < r) update(l, r, d, p << 1 | 1, mid + 1, cr);
    tree[p] = tree[p << 1] + tree[p << 1 | 1];
}
ll query(int l, int r, int p = 1, int cl = 1, int cr = n)
{
    if (cl >= l && cr <= r) return tree[p];
    push_down(p, cr - cl + 1);
    ll mid = (cl + cr) >> 1, ans = 0;
    if (mid >= l) ans += query(l, r, p << 1, cl, mid);
    if (mid < r) ans += query(l, r, p << 1 | 1, mid + 1, cr);
    return ans;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    for (int i = 1; i <= n; ++i)
        cin >> A[i];
    build();
    while (m--)
    {
        int op, l, r, d;
        cin >> op >> l >> r;
        if (op == 1)
            cin >> d, update(l, r, d);
        else
            cout << query(l, r) << '\n';
    }
    return 0;
}





//加乘同时实现
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int MAXN = 1e5 + 5;
ll tree[MAXN << 2], mark[MAXN << 2], n, m, mod, A[MAXN];
vector<ll>mark1(MAXN << 2, 1);
void build(int p = 1, int cl = 1, int cr = n)
{
    if (cl == cr) return void(tree[p] = A[cl]);
    int mid = (cl + cr) >> 1;
    build(p << 1, cl, mid);
    build(p << 1 | 1, mid + 1, cr);
    tree[p] = (tree[p << 1] + tree[p << 1 | 1]) % mod;
}
void push_down(int p, int len)
{
    if (len <= 1) return;
    tree[p << 1] = (tree[p << 1] * mark1[p] + (len - len / 2) * mark[p]) % mod;
    mark1[p << 1] = (mark1[p << 1] * mark1[p]) % mod;
    mark[p << 1] = (mark[p << 1] * mark1[p] + mark[p]) % mod;
    tree[p << 1 | 1] = (tree[p << 1 | 1] * mark1[p] + (len / 2) * mark[p]) % mod;
    mark1[p << 1 | 1] = (mark1[p << 1 | 1] * mark1[p]) % mod;
    mark[p << 1 | 1] = (mark[p << 1 | 1] * mark1[p] + mark[p]) % mod;
	mark1[p] = 1;
	mark[p] = 0;
}
void update(int l, int r, int d, int p = 1, int cl = 1, int cr = n)
{
    if (cl >= l && cr <= r)
    {
        tree[p] = (tree[p] + d * (cr - cl + 1)) % mod;
		mark[p] = (mark[p] + d) % mod;
		return;
    }
    push_down(p, cr - cl + 1);
    int mid = (cl + cr) >> 1;
    if (mid >= l) update(l, r, d, p << 1, cl, mid);
    if (mid < r) update(l, r, d, p << 1 | 1, mid + 1, cr);
    tree[p] = (tree[p << 1] + tree[p << 1 | 1]) % mod;
}
void update1(int l, int r, int k, int p = 1, int cl = 1, int cr = n)
{
	if(l <= cl && cr <= r)
	{
		mark[p] = (mark[p] * k) % mod;
		mark1[p] = (mark1[p] * k) % mod;
		tree[p] = (tree[p] * k) % mod;
		return ;
	}
	push_down(p, cr - cl + 1);
	int mid = cl+cr>>1;
	if(mid >= l)update1(l, r, k, p << 1, cl, mid);
	if(mid < r)update1(l, r, k, p << 1 | 1, mid + 1, cr);
	tree[p] = tree [p << 1] + tree[p << 1 | 1];
}
ll query(int l, int r, int p = 1, int cl = 1, int cr = n)
{
    if (cl >= l && cr <= r) return tree[p];
    push_down(p, cr - cl + 1);
    int mid = (cl + cr) >> 1, ans = 0;
    if (mid >= l) ans = (ans + query(l, r, p << 1, cl, mid)) % mod;
    if (mid < r) ans = (ans + query(l, r, p << 1 | 1, mid + 1, cr)) % mod;
    return ans % mod;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m >> mod;
    for (int i = 1; i <= n; ++i)
        cin >> A[i];
    build();
    while (m--)
    {
        int op, l, r, d;
        cin >> op >> l >> r;
        if (op == 1)//乘
            cin >> d, update1(l, r, d);
        else if (op == 2)//加
			cin >> d, update(l,r,d);
		else if (op == 3)
            cout << query(l, r) << '\n';
    }
    return 0;
}




//直接修改区间值
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int MAXN = 1e5 + 5;
ll tree[MAXN << 2], mark[MAXN << 2], n, m, A[MAXN];
void build(int p = 1, int cl = 1, int cr = n)
{
    if (cl == cr) return void(tree[p] = A[cl]);
    int mid = (cl + cr) >> 1;
    build(p << 1, cl, mid);
    build(p << 1 | 1, mid + 1, cr);
    tree[p] = tree[p << 1] + tree[p << 1 | 1];
}
void push_down(int p, int len)
{
    if (len <= 1) return;
    tree[p << 1] = mark[p] * (len - len / 2);
    mark[p << 1] = mark[p];
    tree[p << 1 | 1] = mark[p] * (len / 2);
    mark[p << 1 | 1] = mark[p];
    mark[p] = 0;
}
void update(int l, int r, int d, int p = 1, int cl = 1, int cr = n)
{
    if (cl >= l && cr <= r)
    {
        tree[p] = d * (cr - cl + 1);
		mark[p] = d;
		return;
    }
    if(mark[p]) push_down(p, cr - cl + 1);
    int mid = (cl + cr) >> 1;
    if (mid >= l) update(l, r, d, p << 1, cl, mid);
    if (mid < r) update(l, r, d, p << 1 | 1, mid + 1, cr);
    tree[p] = tree[p << 1] + tree[p << 1 | 1];
}
ll query(int l, int r, int p = 1, int cl = 1, int cr = n)
{
    if (cl >= l && cr <= r) return tree[p];
    if(mark[p]) push_down(p, cr - cl + 1);
    ll mid = (cl + cr) >> 1, ans = 0;
    if (mid >= l) ans += query(l, r, p << 1, cl, mid);
    if (mid < r) ans += query(l, r, p << 1 | 1, mid + 1, cr);
    return ans;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n;
    for (int i = 1; i <= n; ++i)
        cin >> A[i];
    cin >> m;
    build();
    while (m--)
    {
        int op, l, r, d;
        cin >> op >> l >> r;
        if (op == 1)
            cin >> d, update(l, r, d);
        else
            cout << query(l, r) << '\n';
    }
    return 0;
}




//动态开点线段树
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
#define ls(x) tree[x].ls
#define rs(x) tree[x].rs
#define val(x) tree[x].val
#define mark(x) tree[x].mark
const int MAXV = 8e6;
int L = -1e5, R = 1e5, cnt = 1;
int n, m;
struct node
{
    ll val, mark;
    int ls, rs;
} tree[MAXV];
void upd(int &p, int d, int len)
{
    if(!p) p = ++cnt;
    val(p) += d * len;
    mark(p) += d;
}
void push_down(int p, int cl, int cr)
{
    if (cl >= cr) return;
    int mid = (cl + cr - 1) / 2;
    upd(ls(p), mark(p), mid - cl + 1);
    upd(rs(p), mark(p), cr - mid);
    mark(p) = 0;
}
void update(int l, int r, int d, int p = 1, int cl = L, int cr = R)
{
    if (cl >= l && cr <= r)
    {
        val(p) += d * (cr - cl + 1);
        mark(p) += d;
		return;
    }
    push_down(p, cl, cr);
    int mid = (cl + cr - 1) >> 1;
    if (mid >= l) update(l, r, d, ls(p), cl, mid);
    if (mid < r) update(l, r, d, rs(p), mid + 1, cr);
    val(p) = val(ls(p)) + val(rs(p));
}
ll query(int l, int r, int p = 1, int cl = L, int cr = R)
{
    if (cl >= l && cr <= r) return val(p);
    push_down(p, cl, cr);
    ll mid = (cl + cr - 1) >> 1, ans = 0;
    if (mid >= l) ans += query(l, r, ls(p), cl, mid);
    if (mid < r) ans += query(l, r, rs(p), mid + 1, cr);
    return ans;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    L = 1, R = n;
    vector<int>A(n+1,0);
    vector<ll>sum(n+1,0);
    for (int i = 1; i <= n; ++i)
    {
        cin >> A[i];
        sum[i] = sum[i-1] + A[i];
    }
    while (m--)
    {
        int op, l, r, d;
        cin >> op >> l >> r;
        if (op == 1)
            cin >> d, update(l, r, d);
        else
            cout << query(l, r) + sum[r] - sum[l-1] << '\n';
    }
    return 0;
}


