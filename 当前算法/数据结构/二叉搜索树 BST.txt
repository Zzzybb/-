#include<bits/stdc++.h>
using namespace std;
using ll = long long;
#define endl '\n'
const int MAXN = 1e5 + 10;
int n, opt, x;
// L: 左子树根节点编号，R：右子树根节点编号，N：该节点储存的数出现的次数
// val：该节点储存的数，size：以该节点为根节点的子树的节点数目（即子树大小）
int L[MAXN], R[MAXN], N[MAXN], val[MAXN], sz[MAXN], cnt = 1;

void insert(int v, int pos = 1)
{
    sz[pos]++;
    if(N[pos] == 0 && L[pos] == 0 && R[pos] == 0)
    {
        val[pos] = v;
        N[pos] = 1;
    }
    else if(v < val[pos])
    {
        if(L[pos] == 0)
            L[pos] = ++cnt;
        insert(v, L[pos]);
    }
    else if(v > val[pos])
    {
        if(R[pos] == 0)
            R[pos] = ++cnt;
        insert(v, R[pos]);
    }
    else 
        N[pos]++;
}
void remove(int v, int pos = 1)
{
    sz[pos]--;
    if(v < val[pos])
        remove(v,L[pos]);
    else if(v > val[pos])
        remove(v,R[pos]);
    else 
        N[pos]--;
}
int count1(int v, int pos = 1)//求比某数小的数的个数
{
    if (v < val[pos])
        return L[pos] ? count1(v, L[pos]) : 0;
    else if (v > val[pos])
        return sz[L[pos]] + N[pos] + (R[pos] ? count1(v, R[pos]) : 0);
    else 
        return sz[L[pos]];
}
int count2(int v, int pos = 1)//丘比某数大的数的个数
{
    if (v > val[pos])
        return R[pos] ? count2(v,R[pos]) : 0;
    else if (v < val[pos])
        return sz[R[pos]] + N[pos] + (L[pos] ? count2(v,L[pos]) : 0);
    else 
        return sz[R[pos]];
}
int ranks(int v)//求某数的排名
{
    return count1(v) + 1;
}
int kth(int k, int pos = 1)//求指定排名的数
{
    if(sz[L[pos]] + 1 > k)
        return kth(k, L[pos]);
    else if (sz[L[pos]] + N[pos] < k)
        return kth(k - sz[L[pos]] - N[pos], R[pos]);
    else 
        return val[pos];
}
int pre(int v)
{
    int r = count1(v);
    return kth(r);
}
int suc(int v)
{
    int r = sz[1] - count2(v) + 1;
    return kth(r);
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n; 
    while(n--)
    {
        cin >> opt >> x;
        switch(opt)
        {
            case 1 :
                insert(x);
                break;
            case 2 :
                remove(x);
                break;
            case 3 :
                cout << ranks(x) << '\n';
                break;
            case 4 :
                cout << kth(x) << '\n';
                break;
            case 5 :
                cout << pre(x) << '\n';
                break;
            case 6 :
                cout << suc(x) << '\n';
                break;
            default :
                break;


        }
    }
    return 0;
}