//ax === 1 (mod b)则称x为a mod b d 的逆元
//扩展欧几里得，要求gcd(a,b)==1
void exgcd(int a,int b,int&x,int & y)
{
    if(b == 0)
    {
        x = 1, y = 0;
        return ;
    }
    exgcd(b,a % b, y, x);
    y -= a /b * x;
}
int get_inv(int a,int p)
{
    int x = 1, y = 0;
    exgcd(a,p,x,y);
    return (x % p + p) % p;
}
//快速幂法，要求b是一个素数
//x === qpow(a,b-2);
ll qpow(ll a,ll n)
{
	int ans=1;
	while(n)
	{
		if(n & 1)
			ans = (ans * a) % mod;
		a = (a * a) % mod;
		n >>= 1;
	}
	return ans;
}
//线性求逆元, p%i==0没有你元
inv[1] = 1;
for(int i = 2; i <= n; i++)
{
    inv[i] = (ll)(p - p / i) * inv[p % i] % p;
}
//求任意n个数的逆元
s[0] = 1;
for (int i = 1; i <= n; ++i) s[i] = s[i - 1] * a[i] % p;
sv[n] = qpow(s[n], p - 2);
for (int i = n; i >= 1; --i) sv[i - 1] = sv[i] * a[i] % p;
for (int i = 1; i <= n; ++i) inv[i] = sv[i] * s[i - 1] % p;