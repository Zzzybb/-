const int MAXN = 1e8;
vector<int> prime(MAXN + 1);  // 存储素数
vector<bool> is_prime(MAXN + 1, true);  // 判断是否为素数
int cnt;  // 素数个数

void linear_sieve(int n) 
{
    cnt = 0;
    for (int i = 2; i <= n; ++i) 
    {
        if (is_prime[i]) {
            prime[++cnt] = i;
        }
        for (int j = 1; j <= cnt && i * prime[j] <= n; ++j) 
        {
            is_prime[i * prime[j]] = false;
            if (i % prime[j] == 0) 
            {
                break;
            }
        }
    }
}





//线性筛求欧拉函数
void pre() {
  for (int i = 1; i <= 5000000; i++) {
    is_prime[i] = 1;
  }
  int cnt = 0;
  is_prime[1] = 0;
  phi[1] = 1;
  for (int i = 2; i <= 5000000; i++) {
    if (is_prime[i]) {
      prime[++cnt] = i;
      phi[i] = i - 1;
    }
    for (int j = 1; j <= cnt && i * prime[j] <= 5000000; j++) {
      is_prime[i * prime[j]] = 0;
      if (i % prime[j])
        phi[i * prime[j]] = phi[i] * phi[prime[j]];
      else {
        phi[i * prime[j]] = phi[i] * prime[j];
        break;
      }
    }
  }
}