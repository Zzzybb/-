const int MAXN = 1e8;
vector<int> prime(MAXN + 1);  // 存储素数
vector<bool> is_prime(MAXN + 1, true);  // 判断是否为素数
int cnt;  // 素数个数

void linear_sieve(int n) 
{
    cnt = 0;
    for (int i = 2; i <= n; ++i) 
    {
        if (is_prime[i]) {
            prime[++cnt] = i;
        }
        for (int j = 1; j <= cnt && i * prime[j] <= n; ++j) 
        {
            is_prime[i * prime[j]] = false;
            if (i % prime[j] == 0) 
            {
                break;
            }
        }
    }
}
int get(int n,int p){
    //n!有多少p质数
    int cnt=0;
    while (n){
        cnt+=n/p;
        n/=p;
    }
    return cnt;
}
int how(int n,int m,int p){
    return get(n,p)-get(n-m,p)-get(m,p);
}
void mul(int s,int& len){
    //高精度乘法
    int t=0;
    for(int i=0;i<len;i++){
        t+=C[i]*s;
        C[i]=t%10;
        t/=10;
    }
    while (t){
        C[len++]=t%10;
        t/=10;
    }
}
signed main(){
    //求C(n,m)
    std::cin>>n>>m; 
    linear_sieve(n);
    int len=1;
    C[0]=1;
    for (int i=1;i<=cnt;i++){
        int x=primes[i];
        int s=how(n,m,x); //C[i]中有多少质数x
        while (s--){
            mul(x,len);
        }
    }
    for (int i=0;i<len;i++){
        std::cout<<C[len-i-1];
    }
    return 0;
}
