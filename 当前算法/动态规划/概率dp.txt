//DP求概率  Codeforces 148 D Bag of mice
//题目大意：袋子里有 w 只白鼠和 b 只黑鼠，公主和龙轮流从袋子里抓老鼠。谁先抓到白色老鼠谁就赢，如果袋子里没有老鼠了并且没有谁抓到白色老鼠，那么算龙赢。公主每次抓一只老鼠，龙每次抓完一只老鼠之后会有一只老鼠跑出来。每次抓的老鼠和跑出来的老鼠都是随机的。公主先抓。问公主赢的概率。
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double lb;
#define all(x) (x).begin(), (x).end()
#define debug(x){cerr<<#x<<'='<<x<<endl;}
#define endl '\n'
int w,b;
double dp[1010][1010];
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> w >> b;
    memset(dp,0,sizeof dp);
    for(int i = 1; i <= w; i++) dp[i][0] = 1;
    for(int i = 1; i <= b; i++) dp[0][i] = 0;
    for(int i = 1; i <= w; i++)
    {
        for(int j = 1; j <= b; j++)
        {
            dp[i][j] += (double)i / (i + j);
            if(j >= 3)
            {
                dp[i][j] += (double)j / (i + j) * (j - 1) / (i + j - 1) * (j - 2) / (i + j - 2) * dp[i][j - 3];
            }
            if(i >= 1 && j >= 2)
            {
                dp[i][j] += (double)j / (i + j) * (j - 1) / (i + j - 1) * i / (i + j - 2) * dp[i - 1][j - 2];
            }
        }
    }
    cout<<fixed<<setprecision(9)<<dp[w][b]<<endl; 
    return 0;
}


//DP求期望 POJ2096

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double lb;
#define all(x) (x).begin(), (x).end()
#define debug(x){cerr<<#x<<'='<<x<<endl;}
#define endl '\n'
//cout<<fixed<<setprecision(5)<< x <<endl;
int n, s;
double dp[1010][1010];

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> s;
    dp[n][s] = 0;
    for(int i = n; i >= 0; i--)
    {
        for(int j = s; j >= 0; j--)
        {
            if(i == n && s == j) continue;
            dp[i][j] = (dp[i][j + 1] * i * (s - j) + dp[i + 1][j] * (n - i) * j + dp[i + 1][j + 1] * (n - i) * (s - j) + n * s) / (n * s - i * j);
        }
    }   
    cout<<fixed<<setprecision(4)<< dp[0][0] <<endl;
    return 0;
}


//换教室
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double lb;
#define all(x) (x).begin(), (x).end()
#define debug(x){cerr<<#x<<'='<<x<<endl;}
#define endl '\n'
//cout<<fixed<<setprecision(5)<< x <<endl;

const int MAXN = 2010;
int n, m, v, e;
int f[MAXN][MAXN], c[MAXN], d[MAXN];
double dp[MAXN][MAXN][2], p[MAXN];

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m >> v >> e;
    for(int i = 1; i <= n; i++) cin >> c[i];
    for(int i = 1; i <= n; i++) cin >> d[i];
    for(int i = 1; i <= n; i++) cin >> p[i];
    for(int i = 1; i <= v; i++)
    {
        for(int j = 1; j < i; j ++) f[i][j] = f[j][i] = 1e9;
    }
    int u, V, w;
    for(int i = 1; i <= e; i++)
    {
        cin >> u >> V >> w;
        f[u][V] = f[V][u] = min (w,f[u][V]);
    }
    for(int k = 1; k <= v; k++)
    {
        for(int i = 1; i <= v; i++)
        {
            for(int j = 1; j < i; j++)
            {
                if(f[i][k] + f[k][j] < f[i][j]) f[i][j] = f[j][i] = f[i][k] + f[k][j];
            }
        }
    }

    for(int i = 1; i <= n; i++)
    {
        for(int j = 0; j <= m; j++) 
        {
            dp[i][j][0] = dp[i][j][1] = 1e9;
        }
    }

    dp[1][0][0] = dp[1][1][1] = 0;
    for(int i = 2; i <= n; i++)
    {
        for(int j = 0; j <= min(i,m); j++)
        {
            dp[i][j][0] = min(dp[i - 1][j][0] + f[c[i - 1]][c[i]],
                                dp[i - 1][j][1] +f[c[i - 1]][c[i]] * (1 - p[i - 1]) + 
                                    f[d[i - 1]][c[i]] * p[i - 1]);
            if(j != 0)
            {
                dp[i][j][1] = min (dp[i - 1][j - 1][0] + f[c[i - 1]][d[i]] * p[i] + 
                                        f[c[i - 1]][c[i]] * (1 - p[i]), 
                                dp[i - 1][j - 1][1] + 
                                f[c[i - 1]][c[i]] * (1 - p[i - 1]) * (1 - p[i]) +
                                f[c[i - 1]][d[i]] * (1 - p[i - 1]) * p[i] +
                                f[d[i - 1]][c[i]] * (1 - p[i]) * p[i - 1] +
                                f[d[i - 1]][d[i]] * p[i - 1] * p[i]);
            }
        }
    }
    double ans = 1e9;
    for(int i = 0; i <= m; i++) ans = min(dp[n][i][0],min(dp[n][i][1],ans));
    cout<<fixed<<setprecision(2)<< ans <<endl;
    return 0;
}