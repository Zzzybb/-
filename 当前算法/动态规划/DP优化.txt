//单调队列优化

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef long double lb;
#define all(x) (x).begin(), (x).end()
#define debug(x){cerr<<#x<<'='<<x<<endl;}
#define endl '\n'
//cout<<fixed<<setprecision(5)<< x <<endl;

const int MAXN = 150000 + 10;
const int MAXM = 300 + 10;

ll f[2][MAXN];
ll a[MAXM], b[MAXM], t[MAXM];
int n, m, d;
int que[MAXN];
int fl = 1;

void init()
{
    memset(f, 207, sizeof f);
    memset(que, 0, sizeof que);
    for(int i = 1; i <= n; i++) f[0][i] = 0;
    fl = 1;
}

void dp()
{
    init();
    for(int i = 1; i <= m; i++)
    {
        int l = 1, r = 0, k = 1;
        for(int j = 1; j <= n; j++)
        {
            for(; k <=  min(1ll * n, j + d * (t[i] - t[i - 1])); k++)
            {
                while(l <= r && f[fl ^ 1][que[r]] <= f[fl ^ 1][k])
                {
                    r--;
                }
                que[++r] = k;
            }
            while(l <= r && que[l] < max(1ll,j - d * (t[i] - t[i - 1])))
            {
                l ++;
            }
            f[fl][j] = f[fl ^ 1][que[l]] - abs(a[i] - j) + b[i];
        }
        fl ^= 1;
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    cin >> n >> m >> d;
    for(int i = 1; i <= m; i++)
    {
        cin >> a[i] >> b[i] >> t[i];
    }
    dp();
    ll ans = -1e18;
    for(int i = 1; i <= n; i++)
    {
        ans = max(ans, f[fl ^ 1][i]);
    }
    cout << ans << endl;
    return 0;
}